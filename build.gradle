import org.apache.tools.ant.filters.ReplaceTokens

/*
* For more details take a look at the Java Quickstart chapter in the Gradle
* user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
*/
buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.10.2"
        classpath 'io.github.fvarrui:javapackager:1.5.1'
    }

    repositories {
        jcenter()
        mavenCentral()
    }
}

// Access Git info from build script
plugins {
    id "org.ajoberstar.grgit" version "3.0.0"
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

wrapper {
    description 'Setup the Gradle wrapper'
    gradleVersion = '6.8.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls', "javafx.fxml", "javafx.swing" ]
}

// Apply the java plugin to add support for Java
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'io.github.fvarrui.javapackager.plugin'

// Definitions
defaultTasks 'clean', 'build'
sourceCompatibility = 11
targetCompatibility = 11

// Don't fail build if tests fail until tests are cleaned up
test.ignoreFailures = true

// Used by gradle assemble & run tasks
mainClassName = 'net.rptools.tokentool.client.Main'
version = "2.2-rc.7"

// Custom properties
ext {
    def repo = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
    def head = repo.head()
    def tags = repo.tag.list().find {
        it.commit == head
    }

    revision = head.abbreviatedId
    revisionFull = head.id

    if (tags) {
        tagVersion = tags.getName()
        msiVersion = tagVersion
        enviroment = "Production"
        //sentryDSN = sentry_production_dsn
    } else {
        tagVersion = 'SNAPSHOT-' + revision
        enviroment = "Development"
        //sentryDSN = sentry_development_dsn
    }

    // vendor, tagVersion, msiVersion, and DSN's defaults are set in gradle.properties
    println 'Configuring for ' + project.name + " " + tagVersion + " by " + vendor

    // for packaging
    operatingSystem = org.gradle.internal.os.OperatingSystem.current()
    publishedVersion = project.version
    bundlerScript = file('package/bin/build-package.sh')
    applicationLibraryPath = file("${buildDir}/libraries")
    javafxModulePath = file("${buildDir}/javafx-modules")
    mainJar = "TokenTool-${version}.jar"
    bundlePath = file("${buildDir}/bundle")
    fileAssociations = file("package/file-associations.properties")
    extraBundlerArguments = []
    if (operatingSystem.isMacOsX()) {
        packageType = 'pkg'
        appIcon = file('icons/mac/Santulator.icns')
        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('package/linux/tokentool.png')
    } else if (operatingSystem.isWindows()) {
        appIcon = file('package/windows/tokentool.ico')
        bundlerScript = file('package/bin/build-package.bat')
        generatedInnoSetupFile = file("/package/application.iss")
        windowsExecutable = file("${bundlePath}/Moulinette/Moulinette.exe")
        bundleContent = file("${bundlePath}/Moulinette/*")
        // Locations for the DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
        windowsDllDirectory = file('C:\\Windows\\System32')
        windowsDllMSVCP140 = file("${windowsDllDirectory}/MSVCP140.dll")
        windowsDllVCRUNTIME140 = file("${windowsDllDirectory}/VCRUNTIME140.dll")
    }
    if (publishedVersion.endsWith('-SNAPSHOT')) {
        publishedVersion = '0.0.1'
    }

    println 'Package: \n' +
            '- Operating System = ' + operatingSystem.name + "\n" +
            '- LibraryPath = ' + applicationLibraryPath + "\n" +
            '- JavaFX Path = ' + javafxModulePath + "\n" +
            '- Main JAR = ' + mainJar + "\n" +
            '- Bundle Path = ' + bundlePath + "\n" +
            '- FileAssociations = ' + fileAssociations + "\n"

}

// Default parameters for gradle run command
run {
    args = [ '-v='+tagVersion, '-vendor='+vendor ]
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8" ]

    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

spotless {
    java {
        licenseHeaderFile	'spotless.license.java'
        googleJavaFormat()
    }

    format 'misc', {
        target '**/*.gradle', '**/.gitignore'

        // spotless has built-in rules for most basic formatting tasks
        trimTrailingWhitespace()
        // or spaces. Takes an integer argument if you don't like 4
        indentWithSpaces(4)
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // For Sentry bug reporting
    annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.0'	// Bridges v1 to v2 for other code in other libs

    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // For PDF image extraction
    implementation 'org.apache.pdfbox:pdfbox:2.0.10'
    implementation 'org.bouncycastle:bcmail-jdk15on:1.59'										// To decrypt passworded/secured pdf's
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'								// For pdf image extraction, specifically for jpeg2000 (jpx) support.
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0'							// For pdf image extraction, specifically for jpeg2000 (jpx) support.

    // Image processing lib
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-core', version: '3.3.2'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-jpeg', version: '3.3.2'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-psd', version: '3.3.2'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-psd

    // Other public libs
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'						// https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'					// https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.10'				// https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'				// https://mvnrepository.com/artifact/com.google.code.gson/gson
}

// Currently includes license files
task copyPackageExtras(type: Copy) {
    from('package/license/')
    into('build/libs/')
    include('*')
}

/** ********************************************
 * For packaging the application
 * ********************************************/

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    from jar
    into "${buildDir}/libraries"
}

task copyJavafxModules(type: Copy) {
    from configurations.runtimeClasspath
    include "javafx*${javafx.platform.classifier}.jar"
    into "${buildDir}/javafx-modules"
}

task recreateIconMacApp(type: Exec) {
    description 'Regenerate the Mac application icon'
    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/App1024.png'), file('icons/mac'), 'Moulinette'
}

task recreateIconWindowsApp(type: Exec) {
    description 'Regenerate the Windows application icon'
    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/App1024.png'), file('icons/windows'), 'Moulinette'
}

task recreateIcons(dependsOn: [recreateIconMacApp, recreateIconWindowsApp]) {
    description 'Regenerate all the application bundle icons'
}

task checkBundlingEnvironment {
    description 'Check the environment for building the installable bundle'
    doLast {
        if (operatingSystem.isWindows()) {
            def javaHome = System.env.JAVA_HOME

            if (javaHome) {
                def javaExecutable = file("${javaHome}/bin/java.exe")
                def packagerFile = file("${javaHome}/bin/jpackager.exe")
                def jmodFile = file("${javaHome}/jmods/jdk.packager.jar")

                if (!javaExecutable.exists()) {
                    throw new GradleException("Unable to find Java executable '${javaExecutable}'")
                }
                if (!packagerFile.exists()) {
                    throw new GradleException("Unable to find Java packager executable at '${packagerFile}'")
                }
                if (!jmodFile.exists()) {
                    throw new GradleException("Unable to find Java packager module at '${jmodFile}'")
                }
                // Check existence of files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
                if (!windowsDllMSVCP140.exists() || !windowsDllVCRUNTIME140.exists()) {
                    throw new GradleException("Unable to find '${windowsDllMSVCP140}' and '${windowsDllVCRUNTIME140}' (see https://github.com/Santulator/Santulator/issues/5)")
                }

            } else {
                throw new GradleException("JAVA_HOME must be set")
            }
        } else {
            if (project.hasProperty('javaPackagerPath')) {
                def packagerFile = file("${javaPackagerPath}/jpackager")

                if (!packagerFile.exists() || !packagerFile.isFile()) {
                    throw new GradleException("The Java Packager '$packagerFile' is missing")
                }
            } else {
                throw new GradleException("Use -PjavaPackagerPath=... to specify the directory containing the Java Packager")
            }
        }
    }
}

task createBundle(type: Exec, dependsOn: [processResources, checkBundlingEnvironment]) {
    description 'Build the installable bundle'
    if (operatingSystem.isWindows()) {
        commandLine 'cmd', '/c',
                bundlerScript,
                "${javafxModulePath}",
                applicationLibraryPath,
                bundlePath,
                mainJar,
                publishedVersion,
                appIcon
    } else {
        commandLine = ['sh',
                       bundlerScript,
                       "${-> file("${javaPackagerPath}/jpackager")}",
                       packageType,
                       "${javafxModulePath}",
                       applicationLibraryPath,
                       bundlePath,
                       mainJar,
                       publishedVersion,
                       fileAssociations,
                       appIcon,
                       *extraBundlerArguments]
    }
}

createBundle.dependsOn ':copyDependencies', ':copyJavafxModules'

if (operatingSystem.isWindows()) {
    processResources {
        filesMatching('application.iss') {
            filter ReplaceTokens, tokens: [
                    'bundle.version': publishedVersion,
                    'executable.location': windowsExecutable.toString(),
                    'bundle.content': bundleContent.toString()
            ]
        }
    }

    task completeInnoSetup(dependsOn: processResources) {
        doLast {
            copy {
                from 'icons/windows'
                into "${bundlePath}/Moulinette"
                include 'Moulinette.ico'
            }
            // Copy files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
            copy {
                from windowsDllMSVCP140
                from windowsDllVCRUNTIME140
                into "${bundlePath}/Moulinette"
            }
            println("Inno Setup file: ${generatedInnoSetupFile}")
        }
    }

    createBundle.finalizedBy completeInnoSetup
}
